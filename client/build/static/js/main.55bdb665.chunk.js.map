{"version":3,"sources":["components/Input.jsx","components/Country.jsx","components/Province.jsx","components/Button.jsx","containers/FormContainer.jsx","components/Add.jsx","components/Search.jsx","components/Utils/Bus.js","components/Flash/index.js","App.js","serviceWorker.js","index.js"],"names":["Input","props","className","FormLabel","title","FormControl","type","id","name","value","placeholder","onChange","handleChange","errors","Feedback","map","error","index","key","Country","optionItems","this","options","country","htmlFor","disabled","React","Component","Province","province","for","placseholder","Button","console","log","style","onClick","action","FormContainer","setValue","obj","is","split","length","undefined","setState","slice","state","countries","provinces","newCoop","address","formatted","locality","postal_code","DEFAULT_COUNTRY","enabled","email","phone","web_site","handleFormSubmit","bind","handleClearForm","handleInput","e","preventDefault","REACT_APP_PROXY","fetch","method","body","JSON","stringify","headers","response","ok","json","result","window","flash","target","onSubmit","FormGroup","controlId","inputType","buttonStyle","initialCountries","initialProvinces","then","data","process","margin","Add","Search","doSearch","query","searchUrl","encodeURIComponent","searchTerm","searchResults","loading","renderSearchResults","ListGroup","variant","item","ListGroupItem","setSearchTerm","setSearchResults","event","EventEmitter","Flash","useState","visibility","setVisibility","message","setMessage","setType","useEffect","Bus","addListener","setTimeout","document","querySelector","addEventListener","emit","App","to","exact","path","component","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.55bdb665.chunk.js","sourcesContent":["import React from 'react';\nimport {FormControl, FormLabel} from 'react-bootstrap';\n\nconst Input = (props) => {\n    return (  \n  <div className=\"form-group\">\n      <FormLabel>{props.title}</FormLabel>\n      <FormControl\n            type={props.type}\n            id={props.name}\n            name={props.name}\n            value={props.value}\n            placeholder={props.placeholder}\n            onChange={props.handleChange}\n          />\n\n      {props.errors && props.errors[props.name] && (\n          <FormControl.Feedback>\n                 {props.errors[props.name].map((error, index) => (\n                     <div key={`field-error-${props.name}-${index}`} className=\"fieldError\">{error}</div>\n                 ))} \n          </FormControl.Feedback>\n      )}\n  </div>\n    )\n}\n\nexport default Input;\n\n","import React from 'react';\n\nclass Country extends React.Component {\n    render () {\n        let countries = this.props.options;\n        let optionItems = countries.map((country) =>\n                <option key={country.id} value={country.id}>{country.name}</option>\n            );\n\n        return (\n          <div className=\"form-group\">\n\t\t<label htmlFor={this.props.name}> {this.props.title} </label>\n\t    <select\n\t\t      id = {this.props.name}\n\t\t      name={this.props.name}\n\t\t      value={this.props.value}\n\t\t      onChange={this.props.handleChange}\n\t\t      className=\"form-control\">\n\t\t      <option value=\"\" disabled>{this.props.placeholder}</option>\n\t\t      {optionItems}\n            </select>\n          </div>\n        )\n    }\n}\n\nexport default Country;\n\n","import React from 'react';\n\nclass Province extends React.Component {\n\n    render () {\n        let provinces = this.props.options;\n        let optionItems = provinces.map((province) =>\n                <option key={province.id} value={province.id}>{province.name}</option>\n            );\n\n        return (\n          <div className=\"form-group\">\n\t\t\t<label for={this.props.name}> {this.props.title} </label>\n\t\t    <select\n\t\t      id = {this.props.name}\n\t\t      name={this.props.name}\n\t\t      value={this.props.value}\n\t\t      onChange={this.props.handleChange}\n\t\t      className=\"form-control\">\n\t\t      <option value=\"\" disabled>{this.props.placseholder}</option>\n                {optionItems}\n             </select>\n         </div>\n        )\n    }\n}\n\nexport default Province;\n\n","import React from 'react';\n\n\nconst Button = (props) => {\n\tconsole.log(props.style);\n\treturn(\n\t<button \n\t\tstyle= {props.style} \n\t\tclassName = {props.type==='primary'? 'btn btn-primary' : 'btn btn-secondary'}\n\t\tonClick= {props.action} > \n\t\t{props.title} \n\t</button>)\n}\n\n\nexport default Button;\n\n","import React, {Component} from 'react';  \nimport {FormGroup} from 'react-bootstrap';\n\n/* Import Components */\nimport Input from '../components/Input';  \nimport Country from '../components/Country';\nimport Province from '../components/Province';\nimport Button from '../components/Button'\n\nclass FormContainer extends Component {  \n  static DEFAULT_COUNTRY = 484\n  static REACT_APP_PROXY = process.env.REACT_APP_PROXY\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      countries: [],\n      provinces: [],\n      errors: [],\n      newCoop: {\n        name: '',\n        type: {\n          name: ''\n        },\n        address: {\n          formatted: '',\n          locality: {\n            name: '',\n            postal_code: '',\n            state: ''\n          },\n          country: FormContainer.DEFAULT_COUNTRY,\n        },\n        enabled: true,\n        email: '',\n        phone: '',\n        web_site: '' \n      },\n\n    }\n    this.handleFormSubmit = this.handleFormSubmit.bind(this);\n    this.handleClearForm = this.handleClearForm.bind(this);\n    this.handleInput = this.handleInput.bind(this);\n  }\n\n  /* This life cycle hook gets executed when the component mounts */\n\n  async handleFormSubmit(e) {\n    e.preventDefault();\n    const NC = this.state.newCoop;\n    delete NC.address.country;\n\n    try {\n      console.log(\"proxy: \" + FormContainer.REACT_APP_PROXY);  \n      const response = await fetch(FormContainer.REACT_APP_PROXY + '/coops/',{\n        method: \"POST\",\n        body: JSON.stringify(this.state.newCoop),\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n      });\n\n      if (response.ok) {\n        const result = await response.json();\n        window.flash('Record has been created successfully!', 'success') \n        this.handleClearForm();\n        return result;\n      }\n      throw await response.json();\n    } catch (errors) {\n      console.log('_error_: ', errors);\n      this.setState({ errors });\n    }  \n  } \n\n  handleClearForm() {\n    // Logic for resetting the form\n  }\n\n  handleInput(e) {\n    let self=this\n    let value = e.target.value;\n    console.log(\"value:\" + value);\n    let name = e.target.name;\n    //update State\n    this.setValue(self.state.newCoop,name,value)\n  }\n\n  setValue = (obj,is, value) => {\n       if (typeof is == 'string')\n         return this.setValue(obj,is.split('.'), value);\n       else if (is.length === 1 && value!==undefined)\n         return this.setState({obj: obj[is[0]] = value});\n       else if (is.length === 0)\n         return obj;\n       else\n         return this.setValue(obj[is[0]],is.slice(1), value);\n  }\n\n  render() {\n    return (\n      <div>\n        <form className=\"container-fluid\" onSubmit={this.handleFormSubmit}>\n            <FormGroup\n                controlId=\"formBasicText\">      \n\n                <Input inputType={'text'}\n                   title= {'Name'} \n                   name= {'name'}\n                   value={this.state.newCoop.name} \n                   placeholder = {'Enter cooperative name'}\n                   handleChange = {this.handleInput}\n                   \n                   /> {/* Name of the cooperative */}\n \n                <Input inputType={'text'}\n                   title= {'Type'} \n                   name= {'type.name'}\n                   value={this.state.newCoop.type.name} \n                   placeholder = {'Enter cooperative type'}\n                   handleChange = {this.handleInput}\n                   \n                   /> {/* Type of the cooperative */}\n \n                <Input inputType={'text'}\n                   title= {'Street'} \n                   name= {'address.formatted'}\n                   value={this.state.newCoop.address.formatted} \n                   placeholder = {'Enter address street'}\n                   handleChange = {this.handleInput}\n                   \n                   /> {/* Address street of the cooperative */}\n \n                <Input inputType={'text'}\n                   title= {'City'} \n                   name= {'address.locality.name'}\n                   value={this.state.newCoop.address.locality.name} \n                   placeholder = {'Enter address city'}\n                   handleChange = {this.handleInput}\n                   \n                   /> {/* Address city of the cooperative */}\n        \n              <Country title={'Country'}\n                  name={'address.country'}\n                  options = {this.state.countries} \n                  value = {this.state.newCoop.address.country}\n                  placeholder = {'Select Country'}\n                  handleChange = {this.handleInput}\n                  /> {/* Country Selection */}\n\n              <Province title={'State'}\n                  name={'address.locality.state'}\n                  options = {this.state.provinces} \n                  value = {this.state.newCoop.address.locality.state}\n                  placeholder = {'Select State'}\n                  handleChange = {this.handleInput}\n                  /> {/* State Selection */}\n\n              <Input inputType={'text'}\n                   title= {'Postal Code'} \n                   name= {'address.locality.postal_code'}\n                   value={this.state.newCoop.address.locality.postal_code} \n                   placeholder = {'Enter postal code'}\n                   handleChange = {this.handleInput}\n                   \n                   /> {/* Address postal code of the cooperative */}\n \n              <Input inputType={'text'}\n                   title= {'Email'} \n                   name= {'email'}\n                   value={this.state.newCoop.email} \n                   placeholder = {'Enter email'}\n                   handleChange = {this.handleInput}\n                   \n                   /> {/* Email of the cooperative */}\n \n              <Input inputType={'text'}\n                   title= {'Phone'} \n                   name= {'phone'}\n                   value={this.state.newCoop.phone} \n                   placeholder = {'Enter phone number'}\n                   handleChange = {this.handleInput}\n                   errors = {this.state.errors} \n \n                   /> {/* Phone number of the cooperative */}\n\n              <Input inputType={'text'}\n                   title= {'Web Site'} \n                   name= {'web_site'}\n                   value={this.state.newCoop.web_site} \n                   placeholder = {'Enter web site'}\n                   handleChange = {this.handleInput}\n                   \n                   /> {/* Web site of the cooperative */}\n\n\n              <Button \n                  action = {this.handleFormSubmit}\n                  type = {'primary'} \n                  title = {'Submit'} \n                  style={buttonStyle}\n              /> { /*Submit */ }\n          \n              <Button \n                  action = {this.handleClearForm}\n                  type = {'secondary'}\n                  title = {'Clear'}\n                  style={buttonStyle}\n              /> {/* Clear the form */}\n\n            </FormGroup>\n        </form>\n      </div>\n    );\n  }\n\n  componentDidMount() {\n    let initialCountries = [];\n    let initialProvinces = [];\n    // Get initial countries \n    fetch(FormContainer.REACT_APP_PROXY + '/countries/')\n        .then(response => {\n            return response.json();\n        }).then(data => {\n        initialCountries = data.map((country) => {\n            return country\n        });\n        console.log(\"output ...\");\n        console.log(initialCountries);\n        this.setState({\n            countries: initialCountries,\n        });\n    });\n    // Get initial provinces (states) \n    fetch(FormContainer.REACT_APP_PROXY + '/states/484/')\n        .then(response => {\n            return response.json();\n        }).then(data => {\n        console.log(data); \n        initialProvinces = data.map((province) => {\n            return province\n        });\n        this.setState({\n            provinces: initialProvinces,\n        });\n    });\n  }\n}\n\nconst buttonStyle = {\n  margin : '10px 10px 10px 10px'\n}\n\nexport default FormContainer;\n\n\n","import React, { Component } from \"react\";\n\nimport FormContainer from '../containers/FormContainer';\n\nexport default class Add extends Component {\n    render() {\n        return (\n            <FormContainer />\n        );\n    }\n}\n\n","import React, { Component } from \"react\";\nimport '../Search.css';\nimport ListGroup from 'react-bootstrap/ListGroup'\nimport ListGroupItem from 'react-bootstrap/ListGroupItem'\n\nexport default class Search extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            searchTerm: \"\",\n            setSearchTerm: \"\",\n            searchResults: [],\n            setSearchResults: []\n        }\n        this.handleChange = this.handleChange.bind(this);\n \n    }\n\n    handleChange(event) {\n\tconst query = event.target.value;\n        if ( ! query ) {\n            this.setState({ searchTerm: query, searchResults: [] } );\n        } else {\n            this.setState({ searchTerm: query, loading: true }, () => {\n                this.doSearch(query);\n            });\n\t}\n    }\n\n    doSearch = ( query ) => {\n\tconst searchUrl = '/coops/?contains=' + encodeURIComponent(query); \n        fetch(searchUrl,{ \n            method: \"GET\" \n        }).then(response => response.json())\n          .then(data => { \n            console.log(\"query:\" + query + \" searchterm:\" + this.state.searchTerm);\n            console.log(data); \n            if (query === this.state.searchTerm) {\n                this.setState({\n                    searchResults: data,\n                    loading: false,\n                });\n            }\n        }); \n    };\n\n    renderSearchResults = () => {\n        const {searchResults} = this.state;\n        if (searchResults && searchResults.length) {\n            return (\n                <div>\n                    <div>Results</div>\n                    <ListGroup variant=\"flush\">\n                        {searchResults.map(item => (\n                        <ListGroupItem key={item.id} value={item.name}>{item.name}</ListGroupItem>\n                        ))}\n                    </ListGroup>\n                </div>\n            );\n        }\n    };\n \n    render() {\n        return (\n            <div className=\"searchForm\">\n                <input\n                    type=\"text\"\n                    placeholder=\"Search\"\n                    value={this.state.searchTerm}\n                    onChange={this.handleChange}\n                />\n                { this.renderSearchResults() }\n            </div>\n        );\n    }\n}\n\n","import EventEmitter from 'events';\nexport default new EventEmitter();\n","import React, { useEffect, useState } from 'react';\nimport Bus from '../Utils/Bus';\n\nimport './index.css';\n\nexport const Flash = () => {\n    let [visibility, setVisibility] = useState(false);\n    let [message, setMessage] = useState('');\n    let [type, setType] = useState('');\n\n    useEffect(() => {\n        Bus.addListener('flash', ({message, type}) => {\n            setVisibility(true);\n            setMessage(message);\n            setType(type);\n            setTimeout(() => {\n                setVisibility(false);\n            }, 4000);\n        });\n                \n\n    }, []);\n\n    useEffect(() => {\n        if(document.querySelector('.close') !== null) {\n            document.querySelector('.close').\n            addEventListener('click', () => setVisibility(false));\n        }\n    })\n\n    return (\n        visibility && <div className={`alert alert-${type}`}>\n                <span className=\"close\"><strong>X</strong></span>\n                <p>{message}</p>\n            </div>\n    )\n}\n\n","import React from 'react';\nimport './App.css';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\n\nimport Add from \"./components/Add\";\nimport Search from \"./components/Search\";\nimport { Flash } from './components/Flash';\nimport Bus from './components/Utils/Bus';\n\nfunction App() {\n  return (<Router> \n    <div className=\"App\">\n      <Flash />\n      <nav className=\"navbar navbar-expand-lg navbar-light fixed-top\">\n        <div className=\"container\">\n          <Link className=\"navbar-brand\" to={\"/add\"}>Chicommons</Link>\n          <div className=\"collapse navbar-collapse\" id=\"navbarTogglerDemo02\">\n            <ul className=\"navbar-nav ml-auto\">\n              <li className=\"nav-item\">\n                <Link className=\"nav-link\" to={\"/add\"}>Add</Link>\n              </li>\n              <li className=\"nav-item\">\n                <Link className=\"nav-link\" to={\"/search\"}>Search</Link>\n              </li>\n            </ul>\n          </div>\n        </div>\n      </nav>\n\n      <div className=\"auth-wrapper\">\n        <div className=\"auth-inner\">\n          <Switch>\n            <Route exact path='/' component={Add} />\n            <Route path=\"/add\" component={Add} />\n            <Route path=\"/search\" component={Search} />\n          </Switch>\n        </div>\n      </div>\n    </div>\n    </Router>\n  );\n}\n\nwindow.flash = (message, type=\"success\") => Bus.emit('flash', ({message, type}));\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n    <BrowserRouter>\n        <App />\n    </BrowserRouter>,\n    document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n\n"],"sourceRoot":""}